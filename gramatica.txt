Gramática de GCL

Programa:
- Bloque:
    <block> -> |[ <declarations> <instructions> ]|

    - Declaraciones:
        <declarations> -> declare <sec_declarations>
                        | λ

        <sec_declarations>  -> <sec_declarations>, <declaration>;
                            | <declaration>

        <declaration> -> <idLists> : <type>

        <idLists>   -> <id>, <idLists> 
                    | <id>

- Instrucciones
<instructions> -> <instructions>, <instruction>;
                | <instruction>

<instruction>  -> skip
                | <assignment>
                | <print_instruction>
                | <conditional>
                | <forLoop>
                | <doLoop>
                | <block>

    - Asignación:
    <assignment> -> <id> := <expression>

    <expression>    -> <expression> + <expression>
                    | <expression> - <expression>
                    | <expression> * <expression>
                    | <expression> \/ <expression>
                    | <expression> /\ <expression>
                    | <expression> < <expression>
                    | <expression> <= <expression>
                    | <expression> >= <expression>
                    | <expression> > <expression>
                    | <expression> == <expression>
                    | <expression> != <expression>
                    | <expression> , <expression>
                    | -<expression>
                    | !<expression>
                    | (<expression>)
                    | <array_access>
                    | <array_modify>
                    | <number>
                    | <boolean>
                    | <id>

    <array_access> -> <expression>[<expression>]

    <array_modify> -> <expression>(<expression>:<expression>)

    - Salida
    <print_instruction> -> print <concatenation>

    <concatenation> -> <concatenation> . <expression>
                    | <expression> 

    - Condicionales y guardias
    <conditional> -> if <guards> fi
    
    <guards>    -> <guards> [] <guard>
                | <guard> 

    <guard> -> <expression> --> <instructions>

    - Iteración for
    <forLoop> -> for <id> in <expression> to <expression> --> <instructions> rof

    - Iteración do
    <doLoop> -> do <guards> od

    
Terminales:
    <type>  -> int 
            | bool
            | array[<number> .. <number>]

    <id> -> [a-zA-Z_][a-zA-Z_]*
    <number>    -> [0-9]+
    <boolean>   -> true
                | false

    <string>    -> "([^\n\]|\"|\\|\n)*"

